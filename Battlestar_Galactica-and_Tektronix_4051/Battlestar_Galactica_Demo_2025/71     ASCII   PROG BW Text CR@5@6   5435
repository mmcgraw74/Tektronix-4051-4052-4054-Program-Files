100 REM Dithered BW R12 Text Creator - 23 MARCH 2025 Monty McGraw110 REM Supports max 1024x780 black and white 1 bit/pixel BMP image120 REM Use PhotoDemon 9.0 https://github.com/tannerhelland/PhotoDemon130 REM DDDemo.exe api.256file.com/dddemo.exe/en-download-98888.html140 REM shows format of bitmap. Data is packed 8-dots per byte MSB-LSB150 REM see https://en.wikipedia.org/wiki/BMP_file_format for details160 REM Open color photo up to 1024x780. Autocorrect and Enhance170 REM Adjustments | Color to Monochrome | Auto Threshold, Sierra3 Ok180 REM Save As Bitmap 1-Bit per Pixel. Open Bitmap with HXD then190 REM export BMP file to Motorola S19 or S28 ASCII HEX format.200 REM Use Notepad++ to add a Title and Attribution at beginning and210 REM then replace \r\n with \r and save with Flash Drive filename.220 INIT 230 REM FNB tests bit X9 (LSB bit 1 to 8) in V9=value, Returns 1 or 0240 DEF FNB(X9)=INT(V9/2^X9-INT(V9/2^X9)+0.5)250 REM X5 & Y5 =absolute D/A X,Y for image lower left corner260 X5=0270 Y5=0280 PRINT "B&W 4051 VECTOR text CREATOR Program - 23 MARCH 2025 MCM"290 WINDOW 0,130,0,100300 DIM P$(3072),A$(80),D(2),Z$(6)310 P$=""320 REM USE 405x Emulator with @5:<input file#> and @6:<output file#>330 REM test with BMP file on Flash Drive & Display"340 PRINT "Convert BMP S19/S28 from @5: to R12 BIN on @6 in 405x EM"350 PRINT "Enter the @5: ASCII S19 INPUT file number: ";360 INPUT F5370 PRINT "Enter the @6: BINARY R12 OUTPUT file number: ";380 INPUT F6390 FIND @5:F5400 FIND @6:F6410 PAGE 420 INPUT @5:T$430 INPUT @5:C$440 L=LEN(T$)450 L=72-(L+LEN(C$))460 MOVE 0,100470 PRINT T$480 MOVE 1.8055*(LEN(T$)+L),100490 PRINT C$500 WRITE @6:T$,C$510 INPUT @5:A$520 REM discard first $, check "BM", filesize, then Image Width & Length530 INPUT @5:A$540 REM check for S1 vs S2 format550 B$=SEG(A$,1,2)560 S2=0570 IF B$="S1" THEN 590580 S2=2590 B$=SEG(A$,9+S2,4)600 IF B$="424D" THEN 630610 PRINT "Not BMP file format.Stop the program!"620 GO TO 350630 B$=SEG(A$,13+S2,2)640 CALL "HEXDEC",B$,F9650 B$=SEG(A$,15+S2,2)660 CALL "HEXDEC",B$,B670 B$=SEG(A$,17+S2,2)680 CALL "HEXDEC",B$,B0690 REM get filesize from file700 F0=65536*B0+256*B+F9710 B$=SEG(A$,45+S2,2)720 CALL "HEXDEC",B$,W0730 B$=SEG(A$,47+S2,2)740 CALL "HEXDEC",B$,B750 W0=256*B+W0760 REM 1 bpp Monochrome bitmap is stored 8-pixels per byte,770 REM aligned on DWORD boundaries for RowSize (R0) bytes780 B$=SEG(A$,53+S2,2)790 CALL "HEXDEC",B$,H0800 B$=SEG(A$,55+S2,2)810 CALL "HEXDEC",B$,B820 H0=256*B+H0830 REM Wikipedia Rowsize(bytes)=INT((BitsPerPixel*ImageWidth+31)/32)*4840 R0=INT((1*W0+31)/32)*4850 IF W0<1025 AND H0<781 THEN 880860 PRINT "Image is too Wide or too High: W=";W0;" H=";H0870 GO TO 490880 REM BW data is 1 for dot, 0 for no dot, MSB to LSB Left-Right890 REM BW data starts on second input at 33, skip last CRC byte900 INPUT @5:A$902 REM **********910 REM DON'T center the Personnel REPORT, set X0=0 and Y0=780912 REM and decrement the line number since image is inverted914 REM and will be displayed top down with doubled 'pixel' vectors916 REM **********917 X0=0918 Y0=0920 REM  X0=INT((1024-W0)/2)-1 MAX 0930 REM  Y0=INT((780-H0)/2)-1 MAX 0940 C0=69-2+S2942 REM *** TOP DOWN vertical direction for INVERTED Personnel REPORT944 FOR Y=780 TO 780-H0 STEP -1950 REM FOR Y=0 TO H0-1 MIN 779960 REM count dots until W0 for end of row970 W9=0972 X6=0974 Y6=0980 FOR X=0 TO R0-1990 C0=C0+21000 IF C0<73+S2 THEN 10301010 C0=9+S21020 INPUT @5:A$1030 B$=SEG(A$,C0,2)1040 CALL "HEXDEC",B$,V91050 REM don't use loop for bits to exit end of row cleanly1060 X9=81070 X8=ABS(X9-8)1080 U=FNB(X9)1082 REM *** this logic is different than BMP create ***1083 REM *** when ON dot is found - create vector for MOVE1084 REM *** if next dot is ON, keep looking for OFF and add the DRAW1086 REM *** to last ON dot location saved to X6 and Y61090 GO TO (U=1)+2*(Y6>0)+1 OF 1170,1102,1092,11401091 REM U=0 and Y6>0 so create DRAW to last ON dot1092 D(1)=X61093 D(2)=Y61095 CALL "CHANGE",D,Z$1096 P$=REP(Z$,LEN(P$)+1,0)1097 X6=01098 Y6=01099 GO TO 11701100 REM U=1 and Y6=0 so create MOVE to X,Y1102 D(1)=X*8+X8+X01110 D(2)=Y+Y01120 D=D*0.1281123 X6=D(1)1124 Y6=D(2)1126 D=-D1130 CALL "CHANGE",D,Z$1131 P$=REP(Z$,LEN(P$)+1,0)1132 GO TO 11701139 REM U=1 Y6>0 so update X6 and Y61140 D(1)=X*8+X8+X01142 D(2)=Y+Y01144 D=D*0.1281146 X6=D(1)1148 Y6=D(2)1170 W9=W9+11180 IF W9<>W0 THEN 12101190 W9=01200 GO TO 12301210 X9=X9-11220 IF X9>0 THEN 10701230 NEXT X1240 IF LEN(P$)<3 THEN 12601250 WRITE @6:P$1255 CALL "RDRAW",P$,1,0,01260 P0=01270 P$=""1280 REM PRINT @5:Y1290 NEXT Y1300 WRITE @6:"|EOG|"1310 HOME 1320 END 1330 REM view the R12 image you created1340 FIND @6:F61350 PAGE 1360 READ @6:T$1370 READ @6:C$1380 L=LEN(T$)1390 L=72-(L+LEN(C$))1400 MOVE 0,1001410 PRINT T$1420 MOVE 1.8055*(LEN(T$)+L),1001430 PRINT C$1440 READ @6:P$1450 IF P$="|EOG|" THEN 14801460 CALL "RDRAW",P$,1,0,01470 GO TO 14401480 HOME 1490 END 1500 REM view the R12 image with title1510 PRINT "Input @5: filenumber: ";1520 INPUT F61530 FIND @5:F61540 PAGE 1550 READ @5:T$1560 READ @5:C$1570 L=LEN(T$)1580 L=72-(L+LEN(C$))1590 MOVE 0,1001600 PRINT T$1610 MOVE 1.8055*(LEN(T$)+L),1001620 PRINT C$1630 READ @5:P$1640 IF P$="|EOG|" THEN 16701650 CALL "RDRAW",P$,1,0,01660 GO TO 16301670 HOME 1680 END 